// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: packet.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d1a6b028d23ecc19);
enum class ResponseType_d1a6b028d23ecc19: uint16_t {
  OK,
  INVALID,
};
CAPNP_DECLARE_ENUM(ResponseType, d1a6b028d23ecc19);
CAPNP_DECLARE_SCHEMA(eea585a8e0273b7b);
CAPNP_DECLARE_SCHEMA(e49824f5cff34d68);
CAPNP_DECLARE_SCHEMA(a51a80a5d0621603);
CAPNP_DECLARE_SCHEMA(9c293df3f2a02a07);
CAPNP_DECLARE_SCHEMA(eb67a0eae928bb61);
CAPNP_DECLARE_SCHEMA(d8f2d86285d59919);
CAPNP_DECLARE_SCHEMA(d92927b00c6d5396);
CAPNP_DECLARE_SCHEMA(9736b56e253cba13);
CAPNP_DECLARE_SCHEMA(d74e917dbcd881cb);
CAPNP_DECLARE_SCHEMA(f90a05fd026809ad);
CAPNP_DECLARE_SCHEMA(fb62f49632f7d8be);
CAPNP_DECLARE_SCHEMA(cd9e95393d3f997d);
CAPNP_DECLARE_SCHEMA(ea4ba10b167d66a7);
CAPNP_DECLARE_SCHEMA(dc828176e706e6f6);
CAPNP_DECLARE_SCHEMA(f7316cad69abb0d4);
CAPNP_DECLARE_SCHEMA(ff39fc1686c4831e);
CAPNP_DECLARE_SCHEMA(cf45ff3a7333fd95);
CAPNP_DECLARE_SCHEMA(867987e2b2e8dc81);
CAPNP_DECLARE_SCHEMA(a95322c67cbf4d00);
CAPNP_DECLARE_SCHEMA(b74c1186fa94955a);
CAPNP_DECLARE_SCHEMA(83b7ecc25270e0af);
CAPNP_DECLARE_SCHEMA(d66ee313fb69e7e4);
CAPNP_DECLARE_SCHEMA(9e5b01cd92a83c05);
CAPNP_DECLARE_SCHEMA(b36ecfe36db7d4ef);
CAPNP_DECLARE_SCHEMA(a9a1635b25f07a7b);
CAPNP_DECLARE_SCHEMA(9cc4c008dd1d858e);

}  // namespace schemas
}  // namespace capnp


typedef ::capnp::schemas::ResponseType_d1a6b028d23ecc19 ResponseType;

struct PutRequest {
  PutRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eea585a8e0273b7b, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PutResponse {
  PutResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e49824f5cff34d68, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetRequest {
  GetRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a51a80a5d0621603, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetResponse {
  GetResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9c293df3f2a02a07, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RdmaSetupRequest {
  RdmaSetupRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eb67a0eae928bb61, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RdmaSetupResponse {
  RdmaSetupResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d8f2d86285d59919, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ClientSyncRequest {
  ClientSyncRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d92927b00c6d5396, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ClientSyncResponse {
  ClientSyncResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9736b56e253cba13, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SingletonPutRequest {
  SingletonPutRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d74e917dbcd881cb, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DeleteRequest {
  DeleteRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f90a05fd026809ad, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FallbackGetRequest {
  FallbackGetRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fb62f49632f7d8be, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FallbackGetResponse {
  FallbackGetResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd9e95393d3f997d, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SharedLogForwardRequest {
  SharedLogForwardRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea4ba10b167d66a7, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SharedLogForwardResponse {
  SharedLogForwardResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dc828176e706e6f6, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SharedLogPutRequestE {
  SharedLogPutRequestE() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f7316cad69abb0d4, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SharedLogPutRequest {
  SharedLogPutRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff39fc1686c4831e, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SharedLogPutResponseE {
  SharedLogPutResponseE() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cf45ff3a7333fd95, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SharedLogPutResponse {
  SharedLogPutResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(867987e2b2e8dc81, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SharedLogEntry {
  SharedLogEntry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a95322c67cbf4d00, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SharedLogGetRequest {
  SharedLogGetRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b74c1186fa94955a, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SharedLogGetResponse {
  SharedLogGetResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(83b7ecc25270e0af, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CraqForwardPropagateRequest {
  CraqForwardPropagateRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d66ee313fb69e7e4, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CraqBackwardPropagateRequest {
  CraqBackwardPropagateRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9e5b01cd92a83c05, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Packet {
  Packet() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Data;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b36ecfe36db7d4ef, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Packet::Data {
  Data() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    PUT_REQUEST,
    PUT_RESPONSE,
    GET_REQUEST,
    GET_RESPONSE,
    RDMA_SETUP_REQUEST,
    RDMA_SETUP_RESPONSE,
    CLIENT_SYNC_REQUEST,
    CLIENT_SYNC_RESPONSE,
    SINGLETON_PUT_REQUEST,
    DELETE_REQUEST,
    FALLBACK_GET_REQUEST,
    FALLBACK_GET_RESPONSE,
    SHARED_LOG_FORWARD_REQUEST,
    SHARED_LOG_FORWARD_RESPONSE,
    SHARED_LOG_PUT_REQUEST,
    SHARED_LOG_PUT_RESPONSE,
    SHARED_LOG_GET_REQUEST,
    SHARED_LOG_GET_RESPONSE,
    CRAQ_FORWARD_PROPAGATE_REQUEST,
    CRAQ_BACKWARD_PROPAGATE_REQUEST,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a9a1635b25f07a7b, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Packets {
  Packets() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9cc4c008dd1d858e, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class PutRequest::Reader {
public:
  typedef PutRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline  ::capnp::Text::Reader getKey() const;

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PutRequest::Builder {
public:
  typedef PutRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline  ::capnp::Text::Builder getKey();
  inline void setKey( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKey();

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PutRequest::Pipeline {
public:
  typedef PutRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PutResponse::Reader {
public:
  typedef PutResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::ResponseType getResponse() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PutResponse::Builder {
public:
  typedef PutResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::ResponseType getResponse();
  inline void setResponse( ::ResponseType value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PutResponse::Pipeline {
public:
  typedef PutResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetRequest::Reader {
public:
  typedef GetRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline  ::capnp::Text::Reader getKey() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetRequest::Builder {
public:
  typedef GetRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline  ::capnp::Text::Builder getKey();
  inline void setKey( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKey();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetRequest::Pipeline {
public:
  typedef GetRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetResponse::Reader {
public:
  typedef GetResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::ResponseType getResponse() const;

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetResponse::Builder {
public:
  typedef GetResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::ResponseType getResponse();
  inline void setResponse( ::ResponseType value);

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetResponse::Pipeline {
public:
  typedef GetResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RdmaSetupRequest::Reader {
public:
  typedef RdmaSetupRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getMachineIndex() const;

  inline  ::uint64_t getStartAddress() const;

  inline  ::uint64_t getSize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RdmaSetupRequest::Builder {
public:
  typedef RdmaSetupRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getMachineIndex();
  inline void setMachineIndex( ::uint64_t value);

  inline  ::uint64_t getStartAddress();
  inline void setStartAddress( ::uint64_t value);

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RdmaSetupRequest::Pipeline {
public:
  typedef RdmaSetupRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RdmaSetupResponse::Reader {
public:
  typedef RdmaSetupResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::ResponseType getResponse() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RdmaSetupResponse::Builder {
public:
  typedef RdmaSetupResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::ResponseType getResponse();
  inline void setResponse( ::ResponseType value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RdmaSetupResponse::Pipeline {
public:
  typedef RdmaSetupResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ClientSyncRequest::Reader {
public:
  typedef ClientSyncRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::ResponseType getResponse() const;

  inline  ::uint64_t getIndex() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ClientSyncRequest::Builder {
public:
  typedef ClientSyncRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::ResponseType getResponse();
  inline void setResponse( ::ResponseType value);

  inline  ::uint64_t getIndex();
  inline void setIndex( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ClientSyncRequest::Pipeline {
public:
  typedef ClientSyncRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ClientSyncResponse::Reader {
public:
  typedef ClientSyncResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::ResponseType getResponse() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ClientSyncResponse::Builder {
public:
  typedef ClientSyncResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::ResponseType getResponse();
  inline void setResponse( ::ResponseType value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ClientSyncResponse::Pipeline {
public:
  typedef ClientSyncResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SingletonPutRequest::Reader {
public:
  typedef SingletonPutRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline  ::capnp::Text::Reader getKey() const;

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

  inline bool getSingleton() const;

  inline  ::uint64_t getForwardCount() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SingletonPutRequest::Builder {
public:
  typedef SingletonPutRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline  ::capnp::Text::Builder getKey();
  inline void setKey( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKey();

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

  inline bool getSingleton();
  inline void setSingleton(bool value);

  inline  ::uint64_t getForwardCount();
  inline void setForwardCount( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SingletonPutRequest::Pipeline {
public:
  typedef SingletonPutRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeleteRequest::Reader {
public:
  typedef DeleteRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline  ::capnp::Text::Reader getKey() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeleteRequest::Builder {
public:
  typedef DeleteRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline  ::capnp::Text::Builder getKey();
  inline void setKey( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKey();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeleteRequest::Pipeline {
public:
  typedef DeleteRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FallbackGetRequest::Reader {
public:
  typedef FallbackGetRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline  ::capnp::Text::Reader getKey() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FallbackGetRequest::Builder {
public:
  typedef FallbackGetRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline  ::capnp::Text::Builder getKey();
  inline void setKey( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKey();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FallbackGetRequest::Pipeline {
public:
  typedef FallbackGetRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FallbackGetResponse::Reader {
public:
  typedef FallbackGetResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::ResponseType getResponse() const;

  inline bool hasKey() const;
  inline  ::capnp::Text::Reader getKey() const;

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

  inline  ::uint64_t getKeyValuePtrOffset() const;

  inline bool getSingleton() const;

  inline  ::uint64_t getForwardCount() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FallbackGetResponse::Builder {
public:
  typedef FallbackGetResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::ResponseType getResponse();
  inline void setResponse( ::ResponseType value);

  inline bool hasKey();
  inline  ::capnp::Text::Builder getKey();
  inline void setKey( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKey();

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

  inline  ::uint64_t getKeyValuePtrOffset();
  inline void setKeyValuePtrOffset( ::uint64_t value);

  inline bool getSingleton();
  inline void setSingleton(bool value);

  inline  ::uint64_t getForwardCount();
  inline void setForwardCount( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FallbackGetResponse::Pipeline {
public:
  typedef FallbackGetResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SharedLogForwardRequest::Reader {
public:
  typedef SharedLogForwardRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline  ::capnp::Text::Reader getKey() const;

  inline  ::uint64_t getHash() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SharedLogForwardRequest::Builder {
public:
  typedef SharedLogForwardRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline  ::capnp::Text::Builder getKey();
  inline void setKey( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKey();

  inline  ::uint64_t getHash();
  inline void setHash( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SharedLogForwardRequest::Pipeline {
public:
  typedef SharedLogForwardRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SharedLogForwardResponse::Reader {
public:
  typedef SharedLogForwardResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::ResponseType getResponse() const;

  inline  ::uint64_t getHash() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SharedLogForwardResponse::Builder {
public:
  typedef SharedLogForwardResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::ResponseType getResponse();
  inline void setResponse( ::ResponseType value);

  inline  ::uint64_t getHash();
  inline void setHash( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SharedLogForwardResponse::Pipeline {
public:
  typedef SharedLogForwardResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SharedLogPutRequestE::Reader {
public:
  typedef SharedLogPutRequestE Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline  ::capnp::Text::Reader getKey() const;

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

  inline  ::uint64_t getHash() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SharedLogPutRequestE::Builder {
public:
  typedef SharedLogPutRequestE Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline  ::capnp::Text::Builder getKey();
  inline void setKey( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKey();

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

  inline  ::uint64_t getHash();
  inline void setHash( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SharedLogPutRequestE::Pipeline {
public:
  typedef SharedLogPutRequestE Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SharedLogPutRequest::Reader {
public:
  typedef SharedLogPutRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasE() const;
  inline  ::capnp::List< ::SharedLogPutRequestE,  ::capnp::Kind::STRUCT>::Reader getE() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SharedLogPutRequest::Builder {
public:
  typedef SharedLogPutRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasE();
  inline  ::capnp::List< ::SharedLogPutRequestE,  ::capnp::Kind::STRUCT>::Builder getE();
  inline void setE( ::capnp::List< ::SharedLogPutRequestE,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::SharedLogPutRequestE,  ::capnp::Kind::STRUCT>::Builder initE(unsigned int size);
  inline void adoptE(::capnp::Orphan< ::capnp::List< ::SharedLogPutRequestE,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::SharedLogPutRequestE,  ::capnp::Kind::STRUCT>> disownE();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SharedLogPutRequest::Pipeline {
public:
  typedef SharedLogPutRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SharedLogPutResponseE::Reader {
public:
  typedef SharedLogPutResponseE Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getIndex() const;

  inline  ::uint64_t getHash() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SharedLogPutResponseE::Builder {
public:
  typedef SharedLogPutResponseE Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getIndex();
  inline void setIndex( ::uint64_t value);

  inline  ::uint64_t getHash();
  inline void setHash( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SharedLogPutResponseE::Pipeline {
public:
  typedef SharedLogPutResponseE Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SharedLogPutResponse::Reader {
public:
  typedef SharedLogPutResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasE() const;
  inline  ::capnp::List< ::SharedLogPutResponseE,  ::capnp::Kind::STRUCT>::Reader getE() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SharedLogPutResponse::Builder {
public:
  typedef SharedLogPutResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasE();
  inline  ::capnp::List< ::SharedLogPutResponseE,  ::capnp::Kind::STRUCT>::Builder getE();
  inline void setE( ::capnp::List< ::SharedLogPutResponseE,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::SharedLogPutResponseE,  ::capnp::Kind::STRUCT>::Builder initE(unsigned int size);
  inline void adoptE(::capnp::Orphan< ::capnp::List< ::SharedLogPutResponseE,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::SharedLogPutResponseE,  ::capnp::Kind::STRUCT>> disownE();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SharedLogPutResponse::Pipeline {
public:
  typedef SharedLogPutResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SharedLogEntry::Reader {
public:
  typedef SharedLogEntry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline  ::capnp::Text::Reader getKey() const;

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SharedLogEntry::Builder {
public:
  typedef SharedLogEntry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline  ::capnp::Text::Builder getKey();
  inline void setKey( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKey();

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SharedLogEntry::Pipeline {
public:
  typedef SharedLogEntry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SharedLogGetRequest::Reader {
public:
  typedef SharedLogGetRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getIndex() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SharedLogGetRequest::Builder {
public:
  typedef SharedLogGetRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getIndex();
  inline void setIndex( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SharedLogGetRequest::Pipeline {
public:
  typedef SharedLogGetRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SharedLogGetResponse::Reader {
public:
  typedef SharedLogGetResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getIndex() const;

  inline  ::uint64_t getLogIndex() const;

  inline bool hasE() const;
  inline  ::capnp::List< ::SharedLogEntry,  ::capnp::Kind::STRUCT>::Reader getE() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SharedLogGetResponse::Builder {
public:
  typedef SharedLogGetResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getIndex();
  inline void setIndex( ::uint64_t value);

  inline  ::uint64_t getLogIndex();
  inline void setLogIndex( ::uint64_t value);

  inline bool hasE();
  inline  ::capnp::List< ::SharedLogEntry,  ::capnp::Kind::STRUCT>::Builder getE();
  inline void setE( ::capnp::List< ::SharedLogEntry,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::SharedLogEntry,  ::capnp::Kind::STRUCT>::Builder initE(unsigned int size);
  inline void adoptE(::capnp::Orphan< ::capnp::List< ::SharedLogEntry,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::SharedLogEntry,  ::capnp::Kind::STRUCT>> disownE();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SharedLogGetResponse::Pipeline {
public:
  typedef SharedLogGetResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CraqForwardPropagateRequest::Reader {
public:
  typedef CraqForwardPropagateRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline  ::capnp::Text::Reader getKey() const;

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

  inline  ::uint64_t getClientIndex() const;

  inline  ::uint64_t getClientPort() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CraqForwardPropagateRequest::Builder {
public:
  typedef CraqForwardPropagateRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline  ::capnp::Text::Builder getKey();
  inline void setKey( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKey();

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

  inline  ::uint64_t getClientIndex();
  inline void setClientIndex( ::uint64_t value);

  inline  ::uint64_t getClientPort();
  inline void setClientPort( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CraqForwardPropagateRequest::Pipeline {
public:
  typedef CraqForwardPropagateRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CraqBackwardPropagateRequest::Reader {
public:
  typedef CraqBackwardPropagateRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline  ::capnp::Text::Reader getKey() const;

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

  inline  ::uint64_t getClientIndex() const;

  inline  ::uint64_t getClientPort() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CraqBackwardPropagateRequest::Builder {
public:
  typedef CraqBackwardPropagateRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline  ::capnp::Text::Builder getKey();
  inline void setKey( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKey();

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

  inline  ::uint64_t getClientIndex();
  inline void setClientIndex( ::uint64_t value);

  inline  ::uint64_t getClientPort();
  inline void setClientPort( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CraqBackwardPropagateRequest::Pipeline {
public:
  typedef CraqBackwardPropagateRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Packet::Reader {
public:
  typedef Packet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline typename Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Packet::Builder {
public:
  typedef Packet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline typename Data::Builder getData();
  inline typename Data::Builder initData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Packet::Pipeline {
public:
  typedef Packet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Data::Pipeline getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Packet::Data::Reader {
public:
  typedef Data Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isPutRequest() const;
  inline bool hasPutRequest() const;
  inline  ::PutRequest::Reader getPutRequest() const;

  inline bool isPutResponse() const;
  inline bool hasPutResponse() const;
  inline  ::PutResponse::Reader getPutResponse() const;

  inline bool isGetRequest() const;
  inline bool hasGetRequest() const;
  inline  ::GetRequest::Reader getGetRequest() const;

  inline bool isGetResponse() const;
  inline bool hasGetResponse() const;
  inline  ::GetResponse::Reader getGetResponse() const;

  inline bool isRdmaSetupRequest() const;
  inline bool hasRdmaSetupRequest() const;
  inline  ::RdmaSetupRequest::Reader getRdmaSetupRequest() const;

  inline bool isRdmaSetupResponse() const;
  inline bool hasRdmaSetupResponse() const;
  inline  ::RdmaSetupResponse::Reader getRdmaSetupResponse() const;

  inline bool isClientSyncRequest() const;
  inline bool hasClientSyncRequest() const;
  inline  ::ClientSyncRequest::Reader getClientSyncRequest() const;

  inline bool isClientSyncResponse() const;
  inline bool hasClientSyncResponse() const;
  inline  ::ClientSyncResponse::Reader getClientSyncResponse() const;

  inline bool isSingletonPutRequest() const;
  inline bool hasSingletonPutRequest() const;
  inline  ::SingletonPutRequest::Reader getSingletonPutRequest() const;

  inline bool isDeleteRequest() const;
  inline bool hasDeleteRequest() const;
  inline  ::DeleteRequest::Reader getDeleteRequest() const;

  inline bool isFallbackGetRequest() const;
  inline bool hasFallbackGetRequest() const;
  inline  ::FallbackGetRequest::Reader getFallbackGetRequest() const;

  inline bool isFallbackGetResponse() const;
  inline bool hasFallbackGetResponse() const;
  inline  ::FallbackGetResponse::Reader getFallbackGetResponse() const;

  inline bool isSharedLogForwardRequest() const;
  inline bool hasSharedLogForwardRequest() const;
  inline  ::SharedLogForwardRequest::Reader getSharedLogForwardRequest() const;

  inline bool isSharedLogForwardResponse() const;
  inline bool hasSharedLogForwardResponse() const;
  inline  ::SharedLogForwardResponse::Reader getSharedLogForwardResponse() const;

  inline bool isSharedLogPutRequest() const;
  inline bool hasSharedLogPutRequest() const;
  inline  ::SharedLogPutRequest::Reader getSharedLogPutRequest() const;

  inline bool isSharedLogPutResponse() const;
  inline bool hasSharedLogPutResponse() const;
  inline  ::SharedLogPutResponse::Reader getSharedLogPutResponse() const;

  inline bool isSharedLogGetRequest() const;
  inline bool hasSharedLogGetRequest() const;
  inline  ::SharedLogGetRequest::Reader getSharedLogGetRequest() const;

  inline bool isSharedLogGetResponse() const;
  inline bool hasSharedLogGetResponse() const;
  inline  ::SharedLogGetResponse::Reader getSharedLogGetResponse() const;

  inline bool isCraqForwardPropagateRequest() const;
  inline bool hasCraqForwardPropagateRequest() const;
  inline  ::CraqForwardPropagateRequest::Reader getCraqForwardPropagateRequest() const;

  inline bool isCraqBackwardPropagateRequest() const;
  inline bool hasCraqBackwardPropagateRequest() const;
  inline  ::CraqBackwardPropagateRequest::Reader getCraqBackwardPropagateRequest() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Packet::Data::Builder {
public:
  typedef Data Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isPutRequest();
  inline bool hasPutRequest();
  inline  ::PutRequest::Builder getPutRequest();
  inline void setPutRequest( ::PutRequest::Reader value);
  inline  ::PutRequest::Builder initPutRequest();
  inline void adoptPutRequest(::capnp::Orphan< ::PutRequest>&& value);
  inline ::capnp::Orphan< ::PutRequest> disownPutRequest();

  inline bool isPutResponse();
  inline bool hasPutResponse();
  inline  ::PutResponse::Builder getPutResponse();
  inline void setPutResponse( ::PutResponse::Reader value);
  inline  ::PutResponse::Builder initPutResponse();
  inline void adoptPutResponse(::capnp::Orphan< ::PutResponse>&& value);
  inline ::capnp::Orphan< ::PutResponse> disownPutResponse();

  inline bool isGetRequest();
  inline bool hasGetRequest();
  inline  ::GetRequest::Builder getGetRequest();
  inline void setGetRequest( ::GetRequest::Reader value);
  inline  ::GetRequest::Builder initGetRequest();
  inline void adoptGetRequest(::capnp::Orphan< ::GetRequest>&& value);
  inline ::capnp::Orphan< ::GetRequest> disownGetRequest();

  inline bool isGetResponse();
  inline bool hasGetResponse();
  inline  ::GetResponse::Builder getGetResponse();
  inline void setGetResponse( ::GetResponse::Reader value);
  inline  ::GetResponse::Builder initGetResponse();
  inline void adoptGetResponse(::capnp::Orphan< ::GetResponse>&& value);
  inline ::capnp::Orphan< ::GetResponse> disownGetResponse();

  inline bool isRdmaSetupRequest();
  inline bool hasRdmaSetupRequest();
  inline  ::RdmaSetupRequest::Builder getRdmaSetupRequest();
  inline void setRdmaSetupRequest( ::RdmaSetupRequest::Reader value);
  inline  ::RdmaSetupRequest::Builder initRdmaSetupRequest();
  inline void adoptRdmaSetupRequest(::capnp::Orphan< ::RdmaSetupRequest>&& value);
  inline ::capnp::Orphan< ::RdmaSetupRequest> disownRdmaSetupRequest();

  inline bool isRdmaSetupResponse();
  inline bool hasRdmaSetupResponse();
  inline  ::RdmaSetupResponse::Builder getRdmaSetupResponse();
  inline void setRdmaSetupResponse( ::RdmaSetupResponse::Reader value);
  inline  ::RdmaSetupResponse::Builder initRdmaSetupResponse();
  inline void adoptRdmaSetupResponse(::capnp::Orphan< ::RdmaSetupResponse>&& value);
  inline ::capnp::Orphan< ::RdmaSetupResponse> disownRdmaSetupResponse();

  inline bool isClientSyncRequest();
  inline bool hasClientSyncRequest();
  inline  ::ClientSyncRequest::Builder getClientSyncRequest();
  inline void setClientSyncRequest( ::ClientSyncRequest::Reader value);
  inline  ::ClientSyncRequest::Builder initClientSyncRequest();
  inline void adoptClientSyncRequest(::capnp::Orphan< ::ClientSyncRequest>&& value);
  inline ::capnp::Orphan< ::ClientSyncRequest> disownClientSyncRequest();

  inline bool isClientSyncResponse();
  inline bool hasClientSyncResponse();
  inline  ::ClientSyncResponse::Builder getClientSyncResponse();
  inline void setClientSyncResponse( ::ClientSyncResponse::Reader value);
  inline  ::ClientSyncResponse::Builder initClientSyncResponse();
  inline void adoptClientSyncResponse(::capnp::Orphan< ::ClientSyncResponse>&& value);
  inline ::capnp::Orphan< ::ClientSyncResponse> disownClientSyncResponse();

  inline bool isSingletonPutRequest();
  inline bool hasSingletonPutRequest();
  inline  ::SingletonPutRequest::Builder getSingletonPutRequest();
  inline void setSingletonPutRequest( ::SingletonPutRequest::Reader value);
  inline  ::SingletonPutRequest::Builder initSingletonPutRequest();
  inline void adoptSingletonPutRequest(::capnp::Orphan< ::SingletonPutRequest>&& value);
  inline ::capnp::Orphan< ::SingletonPutRequest> disownSingletonPutRequest();

  inline bool isDeleteRequest();
  inline bool hasDeleteRequest();
  inline  ::DeleteRequest::Builder getDeleteRequest();
  inline void setDeleteRequest( ::DeleteRequest::Reader value);
  inline  ::DeleteRequest::Builder initDeleteRequest();
  inline void adoptDeleteRequest(::capnp::Orphan< ::DeleteRequest>&& value);
  inline ::capnp::Orphan< ::DeleteRequest> disownDeleteRequest();

  inline bool isFallbackGetRequest();
  inline bool hasFallbackGetRequest();
  inline  ::FallbackGetRequest::Builder getFallbackGetRequest();
  inline void setFallbackGetRequest( ::FallbackGetRequest::Reader value);
  inline  ::FallbackGetRequest::Builder initFallbackGetRequest();
  inline void adoptFallbackGetRequest(::capnp::Orphan< ::FallbackGetRequest>&& value);
  inline ::capnp::Orphan< ::FallbackGetRequest> disownFallbackGetRequest();

  inline bool isFallbackGetResponse();
  inline bool hasFallbackGetResponse();
  inline  ::FallbackGetResponse::Builder getFallbackGetResponse();
  inline void setFallbackGetResponse( ::FallbackGetResponse::Reader value);
  inline  ::FallbackGetResponse::Builder initFallbackGetResponse();
  inline void adoptFallbackGetResponse(::capnp::Orphan< ::FallbackGetResponse>&& value);
  inline ::capnp::Orphan< ::FallbackGetResponse> disownFallbackGetResponse();

  inline bool isSharedLogForwardRequest();
  inline bool hasSharedLogForwardRequest();
  inline  ::SharedLogForwardRequest::Builder getSharedLogForwardRequest();
  inline void setSharedLogForwardRequest( ::SharedLogForwardRequest::Reader value);
  inline  ::SharedLogForwardRequest::Builder initSharedLogForwardRequest();
  inline void adoptSharedLogForwardRequest(::capnp::Orphan< ::SharedLogForwardRequest>&& value);
  inline ::capnp::Orphan< ::SharedLogForwardRequest> disownSharedLogForwardRequest();

  inline bool isSharedLogForwardResponse();
  inline bool hasSharedLogForwardResponse();
  inline  ::SharedLogForwardResponse::Builder getSharedLogForwardResponse();
  inline void setSharedLogForwardResponse( ::SharedLogForwardResponse::Reader value);
  inline  ::SharedLogForwardResponse::Builder initSharedLogForwardResponse();
  inline void adoptSharedLogForwardResponse(::capnp::Orphan< ::SharedLogForwardResponse>&& value);
  inline ::capnp::Orphan< ::SharedLogForwardResponse> disownSharedLogForwardResponse();

  inline bool isSharedLogPutRequest();
  inline bool hasSharedLogPutRequest();
  inline  ::SharedLogPutRequest::Builder getSharedLogPutRequest();
  inline void setSharedLogPutRequest( ::SharedLogPutRequest::Reader value);
  inline  ::SharedLogPutRequest::Builder initSharedLogPutRequest();
  inline void adoptSharedLogPutRequest(::capnp::Orphan< ::SharedLogPutRequest>&& value);
  inline ::capnp::Orphan< ::SharedLogPutRequest> disownSharedLogPutRequest();

  inline bool isSharedLogPutResponse();
  inline bool hasSharedLogPutResponse();
  inline  ::SharedLogPutResponse::Builder getSharedLogPutResponse();
  inline void setSharedLogPutResponse( ::SharedLogPutResponse::Reader value);
  inline  ::SharedLogPutResponse::Builder initSharedLogPutResponse();
  inline void adoptSharedLogPutResponse(::capnp::Orphan< ::SharedLogPutResponse>&& value);
  inline ::capnp::Orphan< ::SharedLogPutResponse> disownSharedLogPutResponse();

  inline bool isSharedLogGetRequest();
  inline bool hasSharedLogGetRequest();
  inline  ::SharedLogGetRequest::Builder getSharedLogGetRequest();
  inline void setSharedLogGetRequest( ::SharedLogGetRequest::Reader value);
  inline  ::SharedLogGetRequest::Builder initSharedLogGetRequest();
  inline void adoptSharedLogGetRequest(::capnp::Orphan< ::SharedLogGetRequest>&& value);
  inline ::capnp::Orphan< ::SharedLogGetRequest> disownSharedLogGetRequest();

  inline bool isSharedLogGetResponse();
  inline bool hasSharedLogGetResponse();
  inline  ::SharedLogGetResponse::Builder getSharedLogGetResponse();
  inline void setSharedLogGetResponse( ::SharedLogGetResponse::Reader value);
  inline  ::SharedLogGetResponse::Builder initSharedLogGetResponse();
  inline void adoptSharedLogGetResponse(::capnp::Orphan< ::SharedLogGetResponse>&& value);
  inline ::capnp::Orphan< ::SharedLogGetResponse> disownSharedLogGetResponse();

  inline bool isCraqForwardPropagateRequest();
  inline bool hasCraqForwardPropagateRequest();
  inline  ::CraqForwardPropagateRequest::Builder getCraqForwardPropagateRequest();
  inline void setCraqForwardPropagateRequest( ::CraqForwardPropagateRequest::Reader value);
  inline  ::CraqForwardPropagateRequest::Builder initCraqForwardPropagateRequest();
  inline void adoptCraqForwardPropagateRequest(::capnp::Orphan< ::CraqForwardPropagateRequest>&& value);
  inline ::capnp::Orphan< ::CraqForwardPropagateRequest> disownCraqForwardPropagateRequest();

  inline bool isCraqBackwardPropagateRequest();
  inline bool hasCraqBackwardPropagateRequest();
  inline  ::CraqBackwardPropagateRequest::Builder getCraqBackwardPropagateRequest();
  inline void setCraqBackwardPropagateRequest( ::CraqBackwardPropagateRequest::Reader value);
  inline  ::CraqBackwardPropagateRequest::Builder initCraqBackwardPropagateRequest();
  inline void adoptCraqBackwardPropagateRequest(::capnp::Orphan< ::CraqBackwardPropagateRequest>&& value);
  inline ::capnp::Orphan< ::CraqBackwardPropagateRequest> disownCraqBackwardPropagateRequest();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Packet::Data::Pipeline {
public:
  typedef Data Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Packets::Reader {
public:
  typedef Packets Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPackets() const;
  inline  ::capnp::List< ::Packet,  ::capnp::Kind::STRUCT>::Reader getPackets() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Packets::Builder {
public:
  typedef Packets Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPackets();
  inline  ::capnp::List< ::Packet,  ::capnp::Kind::STRUCT>::Builder getPackets();
  inline void setPackets( ::capnp::List< ::Packet,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Packet,  ::capnp::Kind::STRUCT>::Builder initPackets(unsigned int size);
  inline void adoptPackets(::capnp::Orphan< ::capnp::List< ::Packet,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Packet,  ::capnp::Kind::STRUCT>> disownPackets();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Packets::Pipeline {
public:
  typedef Packets Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool PutRequest::Reader::hasKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PutRequest::Builder::hasKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PutRequest::Reader::getKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PutRequest::Builder::getKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PutRequest::Builder::setKey( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PutRequest::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PutRequest::Builder::adoptKey(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PutRequest::Builder::disownKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PutRequest::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PutRequest::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PutRequest::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PutRequest::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PutRequest::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PutRequest::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PutRequest::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PutRequest::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::ResponseType PutResponse::Reader::getResponse() const {
  return _reader.getDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::ResponseType PutResponse::Builder::getResponse() {
  return _builder.getDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PutResponse::Builder::setResponse( ::ResponseType value) {
  _builder.setDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool GetRequest::Reader::hasKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GetRequest::Builder::hasKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GetRequest::Reader::getKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GetRequest::Builder::getKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GetRequest::Builder::setKey( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GetRequest::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GetRequest::Builder::adoptKey(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GetRequest::Builder::disownKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::ResponseType GetResponse::Reader::getResponse() const {
  return _reader.getDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::ResponseType GetResponse::Builder::getResponse() {
  return _builder.getDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GetResponse::Builder::setResponse( ::ResponseType value) {
  _builder.setDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool GetResponse::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GetResponse::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GetResponse::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GetResponse::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GetResponse::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GetResponse::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GetResponse::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GetResponse::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t RdmaSetupRequest::Reader::getMachineIndex() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RdmaSetupRequest::Builder::getMachineIndex() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RdmaSetupRequest::Builder::setMachineIndex( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t RdmaSetupRequest::Reader::getStartAddress() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RdmaSetupRequest::Builder::getStartAddress() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RdmaSetupRequest::Builder::setStartAddress( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t RdmaSetupRequest::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RdmaSetupRequest::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RdmaSetupRequest::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::ResponseType RdmaSetupResponse::Reader::getResponse() const {
  return _reader.getDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::ResponseType RdmaSetupResponse::Builder::getResponse() {
  return _builder.getDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RdmaSetupResponse::Builder::setResponse( ::ResponseType value) {
  _builder.setDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::ResponseType ClientSyncRequest::Reader::getResponse() const {
  return _reader.getDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::ResponseType ClientSyncRequest::Builder::getResponse() {
  return _builder.getDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ClientSyncRequest::Builder::setResponse( ::ResponseType value) {
  _builder.setDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ClientSyncRequest::Reader::getIndex() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ClientSyncRequest::Builder::getIndex() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ClientSyncRequest::Builder::setIndex( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::ResponseType ClientSyncResponse::Reader::getResponse() const {
  return _reader.getDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::ResponseType ClientSyncResponse::Builder::getResponse() {
  return _builder.getDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ClientSyncResponse::Builder::setResponse( ::ResponseType value) {
  _builder.setDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SingletonPutRequest::Reader::hasKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SingletonPutRequest::Builder::hasKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SingletonPutRequest::Reader::getKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SingletonPutRequest::Builder::getKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SingletonPutRequest::Builder::setKey( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SingletonPutRequest::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SingletonPutRequest::Builder::adoptKey(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SingletonPutRequest::Builder::disownKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SingletonPutRequest::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SingletonPutRequest::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SingletonPutRequest::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SingletonPutRequest::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SingletonPutRequest::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SingletonPutRequest::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void SingletonPutRequest::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SingletonPutRequest::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SingletonPutRequest::Reader::getSingleton() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool SingletonPutRequest::Builder::getSingleton() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SingletonPutRequest::Builder::setSingleton(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t SingletonPutRequest::Reader::getForwardCount() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SingletonPutRequest::Builder::getForwardCount() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SingletonPutRequest::Builder::setForwardCount( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool DeleteRequest::Reader::hasKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DeleteRequest::Builder::hasKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeleteRequest::Reader::getKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeleteRequest::Builder::getKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DeleteRequest::Builder::setKey( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeleteRequest::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DeleteRequest::Builder::adoptKey(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeleteRequest::Builder::disownKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FallbackGetRequest::Reader::hasKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FallbackGetRequest::Builder::hasKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FallbackGetRequest::Reader::getKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FallbackGetRequest::Builder::getKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FallbackGetRequest::Builder::setKey( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FallbackGetRequest::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FallbackGetRequest::Builder::adoptKey(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FallbackGetRequest::Builder::disownKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::ResponseType FallbackGetResponse::Reader::getResponse() const {
  return _reader.getDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::ResponseType FallbackGetResponse::Builder::getResponse() {
  return _builder.getDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FallbackGetResponse::Builder::setResponse( ::ResponseType value) {
  _builder.setDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool FallbackGetResponse::Reader::hasKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FallbackGetResponse::Builder::hasKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FallbackGetResponse::Reader::getKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FallbackGetResponse::Builder::getKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FallbackGetResponse::Builder::setKey( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FallbackGetResponse::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FallbackGetResponse::Builder::adoptKey(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FallbackGetResponse::Builder::disownKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FallbackGetResponse::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool FallbackGetResponse::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FallbackGetResponse::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FallbackGetResponse::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FallbackGetResponse::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FallbackGetResponse::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void FallbackGetResponse::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FallbackGetResponse::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t FallbackGetResponse::Reader::getKeyValuePtrOffset() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t FallbackGetResponse::Builder::getKeyValuePtrOffset() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FallbackGetResponse::Builder::setKeyValuePtrOffset( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool FallbackGetResponse::Reader::getSingleton() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool FallbackGetResponse::Builder::getSingleton() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void FallbackGetResponse::Builder::setSingleton(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t FallbackGetResponse::Reader::getForwardCount() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t FallbackGetResponse::Builder::getForwardCount() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void FallbackGetResponse::Builder::setForwardCount( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool SharedLogForwardRequest::Reader::hasKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SharedLogForwardRequest::Builder::hasKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SharedLogForwardRequest::Reader::getKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SharedLogForwardRequest::Builder::getKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SharedLogForwardRequest::Builder::setKey( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SharedLogForwardRequest::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SharedLogForwardRequest::Builder::adoptKey(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SharedLogForwardRequest::Builder::disownKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t SharedLogForwardRequest::Reader::getHash() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SharedLogForwardRequest::Builder::getHash() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SharedLogForwardRequest::Builder::setHash( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::ResponseType SharedLogForwardResponse::Reader::getResponse() const {
  return _reader.getDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::ResponseType SharedLogForwardResponse::Builder::getResponse() {
  return _builder.getDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SharedLogForwardResponse::Builder::setResponse( ::ResponseType value) {
  _builder.setDataField< ::ResponseType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t SharedLogForwardResponse::Reader::getHash() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SharedLogForwardResponse::Builder::getHash() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SharedLogForwardResponse::Builder::setHash( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool SharedLogPutRequestE::Reader::hasKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SharedLogPutRequestE::Builder::hasKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SharedLogPutRequestE::Reader::getKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SharedLogPutRequestE::Builder::getKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SharedLogPutRequestE::Builder::setKey( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SharedLogPutRequestE::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SharedLogPutRequestE::Builder::adoptKey(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SharedLogPutRequestE::Builder::disownKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SharedLogPutRequestE::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SharedLogPutRequestE::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SharedLogPutRequestE::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SharedLogPutRequestE::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SharedLogPutRequestE::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SharedLogPutRequestE::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void SharedLogPutRequestE::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SharedLogPutRequestE::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t SharedLogPutRequestE::Reader::getHash() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SharedLogPutRequestE::Builder::getHash() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SharedLogPutRequestE::Builder::setHash( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SharedLogPutRequest::Reader::hasE() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SharedLogPutRequest::Builder::hasE() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::SharedLogPutRequestE,  ::capnp::Kind::STRUCT>::Reader SharedLogPutRequest::Reader::getE() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::SharedLogPutRequestE,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::SharedLogPutRequestE,  ::capnp::Kind::STRUCT>::Builder SharedLogPutRequest::Builder::getE() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::SharedLogPutRequestE,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SharedLogPutRequest::Builder::setE( ::capnp::List< ::SharedLogPutRequestE,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::SharedLogPutRequestE,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::SharedLogPutRequestE,  ::capnp::Kind::STRUCT>::Builder SharedLogPutRequest::Builder::initE(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::SharedLogPutRequestE,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SharedLogPutRequest::Builder::adoptE(
    ::capnp::Orphan< ::capnp::List< ::SharedLogPutRequestE,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::SharedLogPutRequestE,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::SharedLogPutRequestE,  ::capnp::Kind::STRUCT>> SharedLogPutRequest::Builder::disownE() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::SharedLogPutRequestE,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t SharedLogPutResponseE::Reader::getIndex() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SharedLogPutResponseE::Builder::getIndex() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SharedLogPutResponseE::Builder::setIndex( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t SharedLogPutResponseE::Reader::getHash() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SharedLogPutResponseE::Builder::getHash() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SharedLogPutResponseE::Builder::setHash( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool SharedLogPutResponse::Reader::hasE() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SharedLogPutResponse::Builder::hasE() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::SharedLogPutResponseE,  ::capnp::Kind::STRUCT>::Reader SharedLogPutResponse::Reader::getE() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::SharedLogPutResponseE,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::SharedLogPutResponseE,  ::capnp::Kind::STRUCT>::Builder SharedLogPutResponse::Builder::getE() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::SharedLogPutResponseE,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SharedLogPutResponse::Builder::setE( ::capnp::List< ::SharedLogPutResponseE,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::SharedLogPutResponseE,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::SharedLogPutResponseE,  ::capnp::Kind::STRUCT>::Builder SharedLogPutResponse::Builder::initE(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::SharedLogPutResponseE,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SharedLogPutResponse::Builder::adoptE(
    ::capnp::Orphan< ::capnp::List< ::SharedLogPutResponseE,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::SharedLogPutResponseE,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::SharedLogPutResponseE,  ::capnp::Kind::STRUCT>> SharedLogPutResponse::Builder::disownE() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::SharedLogPutResponseE,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SharedLogEntry::Reader::hasKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SharedLogEntry::Builder::hasKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SharedLogEntry::Reader::getKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SharedLogEntry::Builder::getKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SharedLogEntry::Builder::setKey( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SharedLogEntry::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SharedLogEntry::Builder::adoptKey(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SharedLogEntry::Builder::disownKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SharedLogEntry::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SharedLogEntry::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SharedLogEntry::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SharedLogEntry::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SharedLogEntry::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SharedLogEntry::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void SharedLogEntry::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SharedLogEntry::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t SharedLogGetRequest::Reader::getIndex() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SharedLogGetRequest::Builder::getIndex() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SharedLogGetRequest::Builder::setIndex( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t SharedLogGetResponse::Reader::getIndex() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SharedLogGetResponse::Builder::getIndex() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SharedLogGetResponse::Builder::setIndex( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t SharedLogGetResponse::Reader::getLogIndex() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SharedLogGetResponse::Builder::getLogIndex() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SharedLogGetResponse::Builder::setLogIndex( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool SharedLogGetResponse::Reader::hasE() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SharedLogGetResponse::Builder::hasE() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::SharedLogEntry,  ::capnp::Kind::STRUCT>::Reader SharedLogGetResponse::Reader::getE() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::SharedLogEntry,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::SharedLogEntry,  ::capnp::Kind::STRUCT>::Builder SharedLogGetResponse::Builder::getE() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::SharedLogEntry,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SharedLogGetResponse::Builder::setE( ::capnp::List< ::SharedLogEntry,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::SharedLogEntry,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::SharedLogEntry,  ::capnp::Kind::STRUCT>::Builder SharedLogGetResponse::Builder::initE(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::SharedLogEntry,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SharedLogGetResponse::Builder::adoptE(
    ::capnp::Orphan< ::capnp::List< ::SharedLogEntry,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::SharedLogEntry,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::SharedLogEntry,  ::capnp::Kind::STRUCT>> SharedLogGetResponse::Builder::disownE() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::SharedLogEntry,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CraqForwardPropagateRequest::Reader::hasKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CraqForwardPropagateRequest::Builder::hasKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CraqForwardPropagateRequest::Reader::getKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CraqForwardPropagateRequest::Builder::getKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CraqForwardPropagateRequest::Builder::setKey( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CraqForwardPropagateRequest::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CraqForwardPropagateRequest::Builder::adoptKey(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CraqForwardPropagateRequest::Builder::disownKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CraqForwardPropagateRequest::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CraqForwardPropagateRequest::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CraqForwardPropagateRequest::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CraqForwardPropagateRequest::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CraqForwardPropagateRequest::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CraqForwardPropagateRequest::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CraqForwardPropagateRequest::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CraqForwardPropagateRequest::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t CraqForwardPropagateRequest::Reader::getClientIndex() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CraqForwardPropagateRequest::Builder::getClientIndex() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CraqForwardPropagateRequest::Builder::setClientIndex( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CraqForwardPropagateRequest::Reader::getClientPort() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CraqForwardPropagateRequest::Builder::getClientPort() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CraqForwardPropagateRequest::Builder::setClientPort( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool CraqBackwardPropagateRequest::Reader::hasKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CraqBackwardPropagateRequest::Builder::hasKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CraqBackwardPropagateRequest::Reader::getKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CraqBackwardPropagateRequest::Builder::getKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CraqBackwardPropagateRequest::Builder::setKey( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CraqBackwardPropagateRequest::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CraqBackwardPropagateRequest::Builder::adoptKey(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CraqBackwardPropagateRequest::Builder::disownKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CraqBackwardPropagateRequest::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CraqBackwardPropagateRequest::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CraqBackwardPropagateRequest::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CraqBackwardPropagateRequest::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CraqBackwardPropagateRequest::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CraqBackwardPropagateRequest::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CraqBackwardPropagateRequest::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CraqBackwardPropagateRequest::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t CraqBackwardPropagateRequest::Reader::getClientIndex() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CraqBackwardPropagateRequest::Builder::getClientIndex() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CraqBackwardPropagateRequest::Builder::setClientIndex( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t CraqBackwardPropagateRequest::Reader::getClientPort() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t CraqBackwardPropagateRequest::Builder::getClientPort() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CraqBackwardPropagateRequest::Builder::setClientPort( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline typename Packet::Data::Reader Packet::Reader::getData() const {
  return typename Packet::Data::Reader(_reader);
}
inline typename Packet::Data::Builder Packet::Builder::getData() {
  return typename Packet::Data::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Packet::Data::Pipeline Packet::Pipeline::getData() {
  return typename Packet::Data::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Packet::Data::Builder Packet::Builder::initData() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  return typename Packet::Data::Builder(_builder);
}
inline  ::Packet::Data::Which Packet::Data::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::Packet::Data::Which Packet::Data::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Packet::Data::Reader::isPutRequest() const {
  return which() == Packet::Data::PUT_REQUEST;
}
inline bool Packet::Data::Builder::isPutRequest() {
  return which() == Packet::Data::PUT_REQUEST;
}
inline bool Packet::Data::Reader::hasPutRequest() const {
  if (which() != Packet::Data::PUT_REQUEST) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packet::Data::Builder::hasPutRequest() {
  if (which() != Packet::Data::PUT_REQUEST) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::PutRequest::Reader Packet::Data::Reader::getPutRequest() const {
  KJ_IREQUIRE((which() == Packet::Data::PUT_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PutRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::PutRequest::Builder Packet::Data::Builder::getPutRequest() {
  KJ_IREQUIRE((which() == Packet::Data::PUT_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PutRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::setPutRequest( ::PutRequest::Reader value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::PUT_REQUEST);
  ::capnp::_::PointerHelpers< ::PutRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::PutRequest::Builder Packet::Data::Builder::initPutRequest() {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::PUT_REQUEST);
  return ::capnp::_::PointerHelpers< ::PutRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::adoptPutRequest(
    ::capnp::Orphan< ::PutRequest>&& value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::PUT_REQUEST);
  ::capnp::_::PointerHelpers< ::PutRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::PutRequest> Packet::Data::Builder::disownPutRequest() {
  KJ_IREQUIRE((which() == Packet::Data::PUT_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PutRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packet::Data::Reader::isPutResponse() const {
  return which() == Packet::Data::PUT_RESPONSE;
}
inline bool Packet::Data::Builder::isPutResponse() {
  return which() == Packet::Data::PUT_RESPONSE;
}
inline bool Packet::Data::Reader::hasPutResponse() const {
  if (which() != Packet::Data::PUT_RESPONSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packet::Data::Builder::hasPutResponse() {
  if (which() != Packet::Data::PUT_RESPONSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::PutResponse::Reader Packet::Data::Reader::getPutResponse() const {
  KJ_IREQUIRE((which() == Packet::Data::PUT_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PutResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::PutResponse::Builder Packet::Data::Builder::getPutResponse() {
  KJ_IREQUIRE((which() == Packet::Data::PUT_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PutResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::setPutResponse( ::PutResponse::Reader value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::PUT_RESPONSE);
  ::capnp::_::PointerHelpers< ::PutResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::PutResponse::Builder Packet::Data::Builder::initPutResponse() {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::PUT_RESPONSE);
  return ::capnp::_::PointerHelpers< ::PutResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::adoptPutResponse(
    ::capnp::Orphan< ::PutResponse>&& value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::PUT_RESPONSE);
  ::capnp::_::PointerHelpers< ::PutResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::PutResponse> Packet::Data::Builder::disownPutResponse() {
  KJ_IREQUIRE((which() == Packet::Data::PUT_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PutResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packet::Data::Reader::isGetRequest() const {
  return which() == Packet::Data::GET_REQUEST;
}
inline bool Packet::Data::Builder::isGetRequest() {
  return which() == Packet::Data::GET_REQUEST;
}
inline bool Packet::Data::Reader::hasGetRequest() const {
  if (which() != Packet::Data::GET_REQUEST) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packet::Data::Builder::hasGetRequest() {
  if (which() != Packet::Data::GET_REQUEST) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::GetRequest::Reader Packet::Data::Reader::getGetRequest() const {
  KJ_IREQUIRE((which() == Packet::Data::GET_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::GetRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::GetRequest::Builder Packet::Data::Builder::getGetRequest() {
  KJ_IREQUIRE((which() == Packet::Data::GET_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::GetRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::setGetRequest( ::GetRequest::Reader value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::GET_REQUEST);
  ::capnp::_::PointerHelpers< ::GetRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::GetRequest::Builder Packet::Data::Builder::initGetRequest() {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::GET_REQUEST);
  return ::capnp::_::PointerHelpers< ::GetRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::adoptGetRequest(
    ::capnp::Orphan< ::GetRequest>&& value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::GET_REQUEST);
  ::capnp::_::PointerHelpers< ::GetRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::GetRequest> Packet::Data::Builder::disownGetRequest() {
  KJ_IREQUIRE((which() == Packet::Data::GET_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::GetRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packet::Data::Reader::isGetResponse() const {
  return which() == Packet::Data::GET_RESPONSE;
}
inline bool Packet::Data::Builder::isGetResponse() {
  return which() == Packet::Data::GET_RESPONSE;
}
inline bool Packet::Data::Reader::hasGetResponse() const {
  if (which() != Packet::Data::GET_RESPONSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packet::Data::Builder::hasGetResponse() {
  if (which() != Packet::Data::GET_RESPONSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::GetResponse::Reader Packet::Data::Reader::getGetResponse() const {
  KJ_IREQUIRE((which() == Packet::Data::GET_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::GetResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::GetResponse::Builder Packet::Data::Builder::getGetResponse() {
  KJ_IREQUIRE((which() == Packet::Data::GET_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::GetResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::setGetResponse( ::GetResponse::Reader value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::GET_RESPONSE);
  ::capnp::_::PointerHelpers< ::GetResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::GetResponse::Builder Packet::Data::Builder::initGetResponse() {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::GET_RESPONSE);
  return ::capnp::_::PointerHelpers< ::GetResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::adoptGetResponse(
    ::capnp::Orphan< ::GetResponse>&& value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::GET_RESPONSE);
  ::capnp::_::PointerHelpers< ::GetResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::GetResponse> Packet::Data::Builder::disownGetResponse() {
  KJ_IREQUIRE((which() == Packet::Data::GET_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::GetResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packet::Data::Reader::isRdmaSetupRequest() const {
  return which() == Packet::Data::RDMA_SETUP_REQUEST;
}
inline bool Packet::Data::Builder::isRdmaSetupRequest() {
  return which() == Packet::Data::RDMA_SETUP_REQUEST;
}
inline bool Packet::Data::Reader::hasRdmaSetupRequest() const {
  if (which() != Packet::Data::RDMA_SETUP_REQUEST) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packet::Data::Builder::hasRdmaSetupRequest() {
  if (which() != Packet::Data::RDMA_SETUP_REQUEST) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::RdmaSetupRequest::Reader Packet::Data::Reader::getRdmaSetupRequest() const {
  KJ_IREQUIRE((which() == Packet::Data::RDMA_SETUP_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::RdmaSetupRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::RdmaSetupRequest::Builder Packet::Data::Builder::getRdmaSetupRequest() {
  KJ_IREQUIRE((which() == Packet::Data::RDMA_SETUP_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::RdmaSetupRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::setRdmaSetupRequest( ::RdmaSetupRequest::Reader value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::RDMA_SETUP_REQUEST);
  ::capnp::_::PointerHelpers< ::RdmaSetupRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::RdmaSetupRequest::Builder Packet::Data::Builder::initRdmaSetupRequest() {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::RDMA_SETUP_REQUEST);
  return ::capnp::_::PointerHelpers< ::RdmaSetupRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::adoptRdmaSetupRequest(
    ::capnp::Orphan< ::RdmaSetupRequest>&& value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::RDMA_SETUP_REQUEST);
  ::capnp::_::PointerHelpers< ::RdmaSetupRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RdmaSetupRequest> Packet::Data::Builder::disownRdmaSetupRequest() {
  KJ_IREQUIRE((which() == Packet::Data::RDMA_SETUP_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::RdmaSetupRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packet::Data::Reader::isRdmaSetupResponse() const {
  return which() == Packet::Data::RDMA_SETUP_RESPONSE;
}
inline bool Packet::Data::Builder::isRdmaSetupResponse() {
  return which() == Packet::Data::RDMA_SETUP_RESPONSE;
}
inline bool Packet::Data::Reader::hasRdmaSetupResponse() const {
  if (which() != Packet::Data::RDMA_SETUP_RESPONSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packet::Data::Builder::hasRdmaSetupResponse() {
  if (which() != Packet::Data::RDMA_SETUP_RESPONSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::RdmaSetupResponse::Reader Packet::Data::Reader::getRdmaSetupResponse() const {
  KJ_IREQUIRE((which() == Packet::Data::RDMA_SETUP_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::RdmaSetupResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::RdmaSetupResponse::Builder Packet::Data::Builder::getRdmaSetupResponse() {
  KJ_IREQUIRE((which() == Packet::Data::RDMA_SETUP_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::RdmaSetupResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::setRdmaSetupResponse( ::RdmaSetupResponse::Reader value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::RDMA_SETUP_RESPONSE);
  ::capnp::_::PointerHelpers< ::RdmaSetupResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::RdmaSetupResponse::Builder Packet::Data::Builder::initRdmaSetupResponse() {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::RDMA_SETUP_RESPONSE);
  return ::capnp::_::PointerHelpers< ::RdmaSetupResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::adoptRdmaSetupResponse(
    ::capnp::Orphan< ::RdmaSetupResponse>&& value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::RDMA_SETUP_RESPONSE);
  ::capnp::_::PointerHelpers< ::RdmaSetupResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RdmaSetupResponse> Packet::Data::Builder::disownRdmaSetupResponse() {
  KJ_IREQUIRE((which() == Packet::Data::RDMA_SETUP_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::RdmaSetupResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packet::Data::Reader::isClientSyncRequest() const {
  return which() == Packet::Data::CLIENT_SYNC_REQUEST;
}
inline bool Packet::Data::Builder::isClientSyncRequest() {
  return which() == Packet::Data::CLIENT_SYNC_REQUEST;
}
inline bool Packet::Data::Reader::hasClientSyncRequest() const {
  if (which() != Packet::Data::CLIENT_SYNC_REQUEST) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packet::Data::Builder::hasClientSyncRequest() {
  if (which() != Packet::Data::CLIENT_SYNC_REQUEST) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ClientSyncRequest::Reader Packet::Data::Reader::getClientSyncRequest() const {
  KJ_IREQUIRE((which() == Packet::Data::CLIENT_SYNC_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ClientSyncRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ClientSyncRequest::Builder Packet::Data::Builder::getClientSyncRequest() {
  KJ_IREQUIRE((which() == Packet::Data::CLIENT_SYNC_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ClientSyncRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::setClientSyncRequest( ::ClientSyncRequest::Reader value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::CLIENT_SYNC_REQUEST);
  ::capnp::_::PointerHelpers< ::ClientSyncRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ClientSyncRequest::Builder Packet::Data::Builder::initClientSyncRequest() {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::CLIENT_SYNC_REQUEST);
  return ::capnp::_::PointerHelpers< ::ClientSyncRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::adoptClientSyncRequest(
    ::capnp::Orphan< ::ClientSyncRequest>&& value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::CLIENT_SYNC_REQUEST);
  ::capnp::_::PointerHelpers< ::ClientSyncRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ClientSyncRequest> Packet::Data::Builder::disownClientSyncRequest() {
  KJ_IREQUIRE((which() == Packet::Data::CLIENT_SYNC_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ClientSyncRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packet::Data::Reader::isClientSyncResponse() const {
  return which() == Packet::Data::CLIENT_SYNC_RESPONSE;
}
inline bool Packet::Data::Builder::isClientSyncResponse() {
  return which() == Packet::Data::CLIENT_SYNC_RESPONSE;
}
inline bool Packet::Data::Reader::hasClientSyncResponse() const {
  if (which() != Packet::Data::CLIENT_SYNC_RESPONSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packet::Data::Builder::hasClientSyncResponse() {
  if (which() != Packet::Data::CLIENT_SYNC_RESPONSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ClientSyncResponse::Reader Packet::Data::Reader::getClientSyncResponse() const {
  KJ_IREQUIRE((which() == Packet::Data::CLIENT_SYNC_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ClientSyncResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ClientSyncResponse::Builder Packet::Data::Builder::getClientSyncResponse() {
  KJ_IREQUIRE((which() == Packet::Data::CLIENT_SYNC_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ClientSyncResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::setClientSyncResponse( ::ClientSyncResponse::Reader value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::CLIENT_SYNC_RESPONSE);
  ::capnp::_::PointerHelpers< ::ClientSyncResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ClientSyncResponse::Builder Packet::Data::Builder::initClientSyncResponse() {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::CLIENT_SYNC_RESPONSE);
  return ::capnp::_::PointerHelpers< ::ClientSyncResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::adoptClientSyncResponse(
    ::capnp::Orphan< ::ClientSyncResponse>&& value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::CLIENT_SYNC_RESPONSE);
  ::capnp::_::PointerHelpers< ::ClientSyncResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ClientSyncResponse> Packet::Data::Builder::disownClientSyncResponse() {
  KJ_IREQUIRE((which() == Packet::Data::CLIENT_SYNC_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ClientSyncResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packet::Data::Reader::isSingletonPutRequest() const {
  return which() == Packet::Data::SINGLETON_PUT_REQUEST;
}
inline bool Packet::Data::Builder::isSingletonPutRequest() {
  return which() == Packet::Data::SINGLETON_PUT_REQUEST;
}
inline bool Packet::Data::Reader::hasSingletonPutRequest() const {
  if (which() != Packet::Data::SINGLETON_PUT_REQUEST) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packet::Data::Builder::hasSingletonPutRequest() {
  if (which() != Packet::Data::SINGLETON_PUT_REQUEST) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::SingletonPutRequest::Reader Packet::Data::Reader::getSingletonPutRequest() const {
  KJ_IREQUIRE((which() == Packet::Data::SINGLETON_PUT_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SingletonPutRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::SingletonPutRequest::Builder Packet::Data::Builder::getSingletonPutRequest() {
  KJ_IREQUIRE((which() == Packet::Data::SINGLETON_PUT_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SingletonPutRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::setSingletonPutRequest( ::SingletonPutRequest::Reader value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SINGLETON_PUT_REQUEST);
  ::capnp::_::PointerHelpers< ::SingletonPutRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::SingletonPutRequest::Builder Packet::Data::Builder::initSingletonPutRequest() {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SINGLETON_PUT_REQUEST);
  return ::capnp::_::PointerHelpers< ::SingletonPutRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::adoptSingletonPutRequest(
    ::capnp::Orphan< ::SingletonPutRequest>&& value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SINGLETON_PUT_REQUEST);
  ::capnp::_::PointerHelpers< ::SingletonPutRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::SingletonPutRequest> Packet::Data::Builder::disownSingletonPutRequest() {
  KJ_IREQUIRE((which() == Packet::Data::SINGLETON_PUT_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SingletonPutRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packet::Data::Reader::isDeleteRequest() const {
  return which() == Packet::Data::DELETE_REQUEST;
}
inline bool Packet::Data::Builder::isDeleteRequest() {
  return which() == Packet::Data::DELETE_REQUEST;
}
inline bool Packet::Data::Reader::hasDeleteRequest() const {
  if (which() != Packet::Data::DELETE_REQUEST) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packet::Data::Builder::hasDeleteRequest() {
  if (which() != Packet::Data::DELETE_REQUEST) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::DeleteRequest::Reader Packet::Data::Reader::getDeleteRequest() const {
  KJ_IREQUIRE((which() == Packet::Data::DELETE_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeleteRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::DeleteRequest::Builder Packet::Data::Builder::getDeleteRequest() {
  KJ_IREQUIRE((which() == Packet::Data::DELETE_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeleteRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::setDeleteRequest( ::DeleteRequest::Reader value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::DELETE_REQUEST);
  ::capnp::_::PointerHelpers< ::DeleteRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::DeleteRequest::Builder Packet::Data::Builder::initDeleteRequest() {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::DELETE_REQUEST);
  return ::capnp::_::PointerHelpers< ::DeleteRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::adoptDeleteRequest(
    ::capnp::Orphan< ::DeleteRequest>&& value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::DELETE_REQUEST);
  ::capnp::_::PointerHelpers< ::DeleteRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeleteRequest> Packet::Data::Builder::disownDeleteRequest() {
  KJ_IREQUIRE((which() == Packet::Data::DELETE_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeleteRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packet::Data::Reader::isFallbackGetRequest() const {
  return which() == Packet::Data::FALLBACK_GET_REQUEST;
}
inline bool Packet::Data::Builder::isFallbackGetRequest() {
  return which() == Packet::Data::FALLBACK_GET_REQUEST;
}
inline bool Packet::Data::Reader::hasFallbackGetRequest() const {
  if (which() != Packet::Data::FALLBACK_GET_REQUEST) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packet::Data::Builder::hasFallbackGetRequest() {
  if (which() != Packet::Data::FALLBACK_GET_REQUEST) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::FallbackGetRequest::Reader Packet::Data::Reader::getFallbackGetRequest() const {
  KJ_IREQUIRE((which() == Packet::Data::FALLBACK_GET_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::FallbackGetRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::FallbackGetRequest::Builder Packet::Data::Builder::getFallbackGetRequest() {
  KJ_IREQUIRE((which() == Packet::Data::FALLBACK_GET_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::FallbackGetRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::setFallbackGetRequest( ::FallbackGetRequest::Reader value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::FALLBACK_GET_REQUEST);
  ::capnp::_::PointerHelpers< ::FallbackGetRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::FallbackGetRequest::Builder Packet::Data::Builder::initFallbackGetRequest() {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::FALLBACK_GET_REQUEST);
  return ::capnp::_::PointerHelpers< ::FallbackGetRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::adoptFallbackGetRequest(
    ::capnp::Orphan< ::FallbackGetRequest>&& value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::FALLBACK_GET_REQUEST);
  ::capnp::_::PointerHelpers< ::FallbackGetRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::FallbackGetRequest> Packet::Data::Builder::disownFallbackGetRequest() {
  KJ_IREQUIRE((which() == Packet::Data::FALLBACK_GET_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::FallbackGetRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packet::Data::Reader::isFallbackGetResponse() const {
  return which() == Packet::Data::FALLBACK_GET_RESPONSE;
}
inline bool Packet::Data::Builder::isFallbackGetResponse() {
  return which() == Packet::Data::FALLBACK_GET_RESPONSE;
}
inline bool Packet::Data::Reader::hasFallbackGetResponse() const {
  if (which() != Packet::Data::FALLBACK_GET_RESPONSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packet::Data::Builder::hasFallbackGetResponse() {
  if (which() != Packet::Data::FALLBACK_GET_RESPONSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::FallbackGetResponse::Reader Packet::Data::Reader::getFallbackGetResponse() const {
  KJ_IREQUIRE((which() == Packet::Data::FALLBACK_GET_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::FallbackGetResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::FallbackGetResponse::Builder Packet::Data::Builder::getFallbackGetResponse() {
  KJ_IREQUIRE((which() == Packet::Data::FALLBACK_GET_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::FallbackGetResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::setFallbackGetResponse( ::FallbackGetResponse::Reader value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::FALLBACK_GET_RESPONSE);
  ::capnp::_::PointerHelpers< ::FallbackGetResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::FallbackGetResponse::Builder Packet::Data::Builder::initFallbackGetResponse() {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::FALLBACK_GET_RESPONSE);
  return ::capnp::_::PointerHelpers< ::FallbackGetResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::adoptFallbackGetResponse(
    ::capnp::Orphan< ::FallbackGetResponse>&& value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::FALLBACK_GET_RESPONSE);
  ::capnp::_::PointerHelpers< ::FallbackGetResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::FallbackGetResponse> Packet::Data::Builder::disownFallbackGetResponse() {
  KJ_IREQUIRE((which() == Packet::Data::FALLBACK_GET_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::FallbackGetResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packet::Data::Reader::isSharedLogForwardRequest() const {
  return which() == Packet::Data::SHARED_LOG_FORWARD_REQUEST;
}
inline bool Packet::Data::Builder::isSharedLogForwardRequest() {
  return which() == Packet::Data::SHARED_LOG_FORWARD_REQUEST;
}
inline bool Packet::Data::Reader::hasSharedLogForwardRequest() const {
  if (which() != Packet::Data::SHARED_LOG_FORWARD_REQUEST) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packet::Data::Builder::hasSharedLogForwardRequest() {
  if (which() != Packet::Data::SHARED_LOG_FORWARD_REQUEST) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::SharedLogForwardRequest::Reader Packet::Data::Reader::getSharedLogForwardRequest() const {
  KJ_IREQUIRE((which() == Packet::Data::SHARED_LOG_FORWARD_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SharedLogForwardRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::SharedLogForwardRequest::Builder Packet::Data::Builder::getSharedLogForwardRequest() {
  KJ_IREQUIRE((which() == Packet::Data::SHARED_LOG_FORWARD_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SharedLogForwardRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::setSharedLogForwardRequest( ::SharedLogForwardRequest::Reader value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SHARED_LOG_FORWARD_REQUEST);
  ::capnp::_::PointerHelpers< ::SharedLogForwardRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::SharedLogForwardRequest::Builder Packet::Data::Builder::initSharedLogForwardRequest() {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SHARED_LOG_FORWARD_REQUEST);
  return ::capnp::_::PointerHelpers< ::SharedLogForwardRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::adoptSharedLogForwardRequest(
    ::capnp::Orphan< ::SharedLogForwardRequest>&& value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SHARED_LOG_FORWARD_REQUEST);
  ::capnp::_::PointerHelpers< ::SharedLogForwardRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::SharedLogForwardRequest> Packet::Data::Builder::disownSharedLogForwardRequest() {
  KJ_IREQUIRE((which() == Packet::Data::SHARED_LOG_FORWARD_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SharedLogForwardRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packet::Data::Reader::isSharedLogForwardResponse() const {
  return which() == Packet::Data::SHARED_LOG_FORWARD_RESPONSE;
}
inline bool Packet::Data::Builder::isSharedLogForwardResponse() {
  return which() == Packet::Data::SHARED_LOG_FORWARD_RESPONSE;
}
inline bool Packet::Data::Reader::hasSharedLogForwardResponse() const {
  if (which() != Packet::Data::SHARED_LOG_FORWARD_RESPONSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packet::Data::Builder::hasSharedLogForwardResponse() {
  if (which() != Packet::Data::SHARED_LOG_FORWARD_RESPONSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::SharedLogForwardResponse::Reader Packet::Data::Reader::getSharedLogForwardResponse() const {
  KJ_IREQUIRE((which() == Packet::Data::SHARED_LOG_FORWARD_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SharedLogForwardResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::SharedLogForwardResponse::Builder Packet::Data::Builder::getSharedLogForwardResponse() {
  KJ_IREQUIRE((which() == Packet::Data::SHARED_LOG_FORWARD_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SharedLogForwardResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::setSharedLogForwardResponse( ::SharedLogForwardResponse::Reader value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SHARED_LOG_FORWARD_RESPONSE);
  ::capnp::_::PointerHelpers< ::SharedLogForwardResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::SharedLogForwardResponse::Builder Packet::Data::Builder::initSharedLogForwardResponse() {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SHARED_LOG_FORWARD_RESPONSE);
  return ::capnp::_::PointerHelpers< ::SharedLogForwardResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::adoptSharedLogForwardResponse(
    ::capnp::Orphan< ::SharedLogForwardResponse>&& value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SHARED_LOG_FORWARD_RESPONSE);
  ::capnp::_::PointerHelpers< ::SharedLogForwardResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::SharedLogForwardResponse> Packet::Data::Builder::disownSharedLogForwardResponse() {
  KJ_IREQUIRE((which() == Packet::Data::SHARED_LOG_FORWARD_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SharedLogForwardResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packet::Data::Reader::isSharedLogPutRequest() const {
  return which() == Packet::Data::SHARED_LOG_PUT_REQUEST;
}
inline bool Packet::Data::Builder::isSharedLogPutRequest() {
  return which() == Packet::Data::SHARED_LOG_PUT_REQUEST;
}
inline bool Packet::Data::Reader::hasSharedLogPutRequest() const {
  if (which() != Packet::Data::SHARED_LOG_PUT_REQUEST) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packet::Data::Builder::hasSharedLogPutRequest() {
  if (which() != Packet::Data::SHARED_LOG_PUT_REQUEST) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::SharedLogPutRequest::Reader Packet::Data::Reader::getSharedLogPutRequest() const {
  KJ_IREQUIRE((which() == Packet::Data::SHARED_LOG_PUT_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SharedLogPutRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::SharedLogPutRequest::Builder Packet::Data::Builder::getSharedLogPutRequest() {
  KJ_IREQUIRE((which() == Packet::Data::SHARED_LOG_PUT_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SharedLogPutRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::setSharedLogPutRequest( ::SharedLogPutRequest::Reader value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SHARED_LOG_PUT_REQUEST);
  ::capnp::_::PointerHelpers< ::SharedLogPutRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::SharedLogPutRequest::Builder Packet::Data::Builder::initSharedLogPutRequest() {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SHARED_LOG_PUT_REQUEST);
  return ::capnp::_::PointerHelpers< ::SharedLogPutRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::adoptSharedLogPutRequest(
    ::capnp::Orphan< ::SharedLogPutRequest>&& value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SHARED_LOG_PUT_REQUEST);
  ::capnp::_::PointerHelpers< ::SharedLogPutRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::SharedLogPutRequest> Packet::Data::Builder::disownSharedLogPutRequest() {
  KJ_IREQUIRE((which() == Packet::Data::SHARED_LOG_PUT_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SharedLogPutRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packet::Data::Reader::isSharedLogPutResponse() const {
  return which() == Packet::Data::SHARED_LOG_PUT_RESPONSE;
}
inline bool Packet::Data::Builder::isSharedLogPutResponse() {
  return which() == Packet::Data::SHARED_LOG_PUT_RESPONSE;
}
inline bool Packet::Data::Reader::hasSharedLogPutResponse() const {
  if (which() != Packet::Data::SHARED_LOG_PUT_RESPONSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packet::Data::Builder::hasSharedLogPutResponse() {
  if (which() != Packet::Data::SHARED_LOG_PUT_RESPONSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::SharedLogPutResponse::Reader Packet::Data::Reader::getSharedLogPutResponse() const {
  KJ_IREQUIRE((which() == Packet::Data::SHARED_LOG_PUT_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SharedLogPutResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::SharedLogPutResponse::Builder Packet::Data::Builder::getSharedLogPutResponse() {
  KJ_IREQUIRE((which() == Packet::Data::SHARED_LOG_PUT_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SharedLogPutResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::setSharedLogPutResponse( ::SharedLogPutResponse::Reader value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SHARED_LOG_PUT_RESPONSE);
  ::capnp::_::PointerHelpers< ::SharedLogPutResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::SharedLogPutResponse::Builder Packet::Data::Builder::initSharedLogPutResponse() {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SHARED_LOG_PUT_RESPONSE);
  return ::capnp::_::PointerHelpers< ::SharedLogPutResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::adoptSharedLogPutResponse(
    ::capnp::Orphan< ::SharedLogPutResponse>&& value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SHARED_LOG_PUT_RESPONSE);
  ::capnp::_::PointerHelpers< ::SharedLogPutResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::SharedLogPutResponse> Packet::Data::Builder::disownSharedLogPutResponse() {
  KJ_IREQUIRE((which() == Packet::Data::SHARED_LOG_PUT_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SharedLogPutResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packet::Data::Reader::isSharedLogGetRequest() const {
  return which() == Packet::Data::SHARED_LOG_GET_REQUEST;
}
inline bool Packet::Data::Builder::isSharedLogGetRequest() {
  return which() == Packet::Data::SHARED_LOG_GET_REQUEST;
}
inline bool Packet::Data::Reader::hasSharedLogGetRequest() const {
  if (which() != Packet::Data::SHARED_LOG_GET_REQUEST) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packet::Data::Builder::hasSharedLogGetRequest() {
  if (which() != Packet::Data::SHARED_LOG_GET_REQUEST) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::SharedLogGetRequest::Reader Packet::Data::Reader::getSharedLogGetRequest() const {
  KJ_IREQUIRE((which() == Packet::Data::SHARED_LOG_GET_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SharedLogGetRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::SharedLogGetRequest::Builder Packet::Data::Builder::getSharedLogGetRequest() {
  KJ_IREQUIRE((which() == Packet::Data::SHARED_LOG_GET_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SharedLogGetRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::setSharedLogGetRequest( ::SharedLogGetRequest::Reader value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SHARED_LOG_GET_REQUEST);
  ::capnp::_::PointerHelpers< ::SharedLogGetRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::SharedLogGetRequest::Builder Packet::Data::Builder::initSharedLogGetRequest() {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SHARED_LOG_GET_REQUEST);
  return ::capnp::_::PointerHelpers< ::SharedLogGetRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::adoptSharedLogGetRequest(
    ::capnp::Orphan< ::SharedLogGetRequest>&& value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SHARED_LOG_GET_REQUEST);
  ::capnp::_::PointerHelpers< ::SharedLogGetRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::SharedLogGetRequest> Packet::Data::Builder::disownSharedLogGetRequest() {
  KJ_IREQUIRE((which() == Packet::Data::SHARED_LOG_GET_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SharedLogGetRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packet::Data::Reader::isSharedLogGetResponse() const {
  return which() == Packet::Data::SHARED_LOG_GET_RESPONSE;
}
inline bool Packet::Data::Builder::isSharedLogGetResponse() {
  return which() == Packet::Data::SHARED_LOG_GET_RESPONSE;
}
inline bool Packet::Data::Reader::hasSharedLogGetResponse() const {
  if (which() != Packet::Data::SHARED_LOG_GET_RESPONSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packet::Data::Builder::hasSharedLogGetResponse() {
  if (which() != Packet::Data::SHARED_LOG_GET_RESPONSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::SharedLogGetResponse::Reader Packet::Data::Reader::getSharedLogGetResponse() const {
  KJ_IREQUIRE((which() == Packet::Data::SHARED_LOG_GET_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SharedLogGetResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::SharedLogGetResponse::Builder Packet::Data::Builder::getSharedLogGetResponse() {
  KJ_IREQUIRE((which() == Packet::Data::SHARED_LOG_GET_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SharedLogGetResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::setSharedLogGetResponse( ::SharedLogGetResponse::Reader value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SHARED_LOG_GET_RESPONSE);
  ::capnp::_::PointerHelpers< ::SharedLogGetResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::SharedLogGetResponse::Builder Packet::Data::Builder::initSharedLogGetResponse() {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SHARED_LOG_GET_RESPONSE);
  return ::capnp::_::PointerHelpers< ::SharedLogGetResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::adoptSharedLogGetResponse(
    ::capnp::Orphan< ::SharedLogGetResponse>&& value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::SHARED_LOG_GET_RESPONSE);
  ::capnp::_::PointerHelpers< ::SharedLogGetResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::SharedLogGetResponse> Packet::Data::Builder::disownSharedLogGetResponse() {
  KJ_IREQUIRE((which() == Packet::Data::SHARED_LOG_GET_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::SharedLogGetResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packet::Data::Reader::isCraqForwardPropagateRequest() const {
  return which() == Packet::Data::CRAQ_FORWARD_PROPAGATE_REQUEST;
}
inline bool Packet::Data::Builder::isCraqForwardPropagateRequest() {
  return which() == Packet::Data::CRAQ_FORWARD_PROPAGATE_REQUEST;
}
inline bool Packet::Data::Reader::hasCraqForwardPropagateRequest() const {
  if (which() != Packet::Data::CRAQ_FORWARD_PROPAGATE_REQUEST) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packet::Data::Builder::hasCraqForwardPropagateRequest() {
  if (which() != Packet::Data::CRAQ_FORWARD_PROPAGATE_REQUEST) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::CraqForwardPropagateRequest::Reader Packet::Data::Reader::getCraqForwardPropagateRequest() const {
  KJ_IREQUIRE((which() == Packet::Data::CRAQ_FORWARD_PROPAGATE_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::CraqForwardPropagateRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::CraqForwardPropagateRequest::Builder Packet::Data::Builder::getCraqForwardPropagateRequest() {
  KJ_IREQUIRE((which() == Packet::Data::CRAQ_FORWARD_PROPAGATE_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::CraqForwardPropagateRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::setCraqForwardPropagateRequest( ::CraqForwardPropagateRequest::Reader value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::CRAQ_FORWARD_PROPAGATE_REQUEST);
  ::capnp::_::PointerHelpers< ::CraqForwardPropagateRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::CraqForwardPropagateRequest::Builder Packet::Data::Builder::initCraqForwardPropagateRequest() {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::CRAQ_FORWARD_PROPAGATE_REQUEST);
  return ::capnp::_::PointerHelpers< ::CraqForwardPropagateRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::adoptCraqForwardPropagateRequest(
    ::capnp::Orphan< ::CraqForwardPropagateRequest>&& value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::CRAQ_FORWARD_PROPAGATE_REQUEST);
  ::capnp::_::PointerHelpers< ::CraqForwardPropagateRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::CraqForwardPropagateRequest> Packet::Data::Builder::disownCraqForwardPropagateRequest() {
  KJ_IREQUIRE((which() == Packet::Data::CRAQ_FORWARD_PROPAGATE_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::CraqForwardPropagateRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packet::Data::Reader::isCraqBackwardPropagateRequest() const {
  return which() == Packet::Data::CRAQ_BACKWARD_PROPAGATE_REQUEST;
}
inline bool Packet::Data::Builder::isCraqBackwardPropagateRequest() {
  return which() == Packet::Data::CRAQ_BACKWARD_PROPAGATE_REQUEST;
}
inline bool Packet::Data::Reader::hasCraqBackwardPropagateRequest() const {
  if (which() != Packet::Data::CRAQ_BACKWARD_PROPAGATE_REQUEST) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packet::Data::Builder::hasCraqBackwardPropagateRequest() {
  if (which() != Packet::Data::CRAQ_BACKWARD_PROPAGATE_REQUEST) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::CraqBackwardPropagateRequest::Reader Packet::Data::Reader::getCraqBackwardPropagateRequest() const {
  KJ_IREQUIRE((which() == Packet::Data::CRAQ_BACKWARD_PROPAGATE_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::CraqBackwardPropagateRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::CraqBackwardPropagateRequest::Builder Packet::Data::Builder::getCraqBackwardPropagateRequest() {
  KJ_IREQUIRE((which() == Packet::Data::CRAQ_BACKWARD_PROPAGATE_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::CraqBackwardPropagateRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::setCraqBackwardPropagateRequest( ::CraqBackwardPropagateRequest::Reader value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::CRAQ_BACKWARD_PROPAGATE_REQUEST);
  ::capnp::_::PointerHelpers< ::CraqBackwardPropagateRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::CraqBackwardPropagateRequest::Builder Packet::Data::Builder::initCraqBackwardPropagateRequest() {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::CRAQ_BACKWARD_PROPAGATE_REQUEST);
  return ::capnp::_::PointerHelpers< ::CraqBackwardPropagateRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packet::Data::Builder::adoptCraqBackwardPropagateRequest(
    ::capnp::Orphan< ::CraqBackwardPropagateRequest>&& value) {
  _builder.setDataField<Packet::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Packet::Data::CRAQ_BACKWARD_PROPAGATE_REQUEST);
  ::capnp::_::PointerHelpers< ::CraqBackwardPropagateRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::CraqBackwardPropagateRequest> Packet::Data::Builder::disownCraqBackwardPropagateRequest() {
  KJ_IREQUIRE((which() == Packet::Data::CRAQ_BACKWARD_PROPAGATE_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::CraqBackwardPropagateRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Packets::Reader::hasPackets() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Packets::Builder::hasPackets() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Packet,  ::capnp::Kind::STRUCT>::Reader Packets::Reader::getPackets() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packet,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Packet,  ::capnp::Kind::STRUCT>::Builder Packets::Builder::getPackets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packet,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Packets::Builder::setPackets( ::capnp::List< ::Packet,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Packet,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Packet,  ::capnp::Kind::STRUCT>::Builder Packets::Builder::initPackets(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packet,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Packets::Builder::adoptPackets(
    ::capnp::Orphan< ::capnp::List< ::Packet,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Packet,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Packet,  ::capnp::Kind::STRUCT>> Packets::Builder::disownPackets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Packet,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}


CAPNP_END_HEADER

