@0xdbb9ad1f14bf0b36;  # unique file ID, generated by `capnp id`

enum ResponseType {
  ok @0;
  invalid @1;
}

struct PutRequest {
  key @0 :Text;
  value @1 :Text;
}

struct PutResponse {
  response @0 :ResponseType;
}

struct GetRequest {
  key @0 :Text;
}

struct GetResponse {
  response @0 :ResponseType;
  value @1: Text;
}

struct RdmaSetupRequest {
  machineIndex @0: UInt64;
  startAddress @1: UInt64;
  size @2: UInt64;
}

struct RdmaSetupResponse {
  response @0 :ResponseType;
}

struct ClientSyncRequest {
  response @0 :ResponseType;
  index @1: UInt64;
}

struct ClientSyncResponse {
  response @0 :ResponseType;
}

struct SingletonPutRequest {
  key @0 :Text;
  value @1 :Text;
  singleton @2 :Bool;
  forwardCount @3 : UInt64;
}

struct DeleteRequest {
  key @0 :Text;
}

struct FallbackGetRequest {
  key @0 :Text;
}

struct FallbackGetResponse {
  response @0 :ResponseType;
  key @1: Text;
  value @2: Text;
  keyValuePtrOffset @3: UInt64;
  singleton @4: Bool;
  forwardCount @5: UInt64;
}

struct SharedLogForwardRequest {
  key @0 :Text;
  hash @1 :UInt64;
}

struct SharedLogForwardResponse {
  response @0 :ResponseType;
  hash @1 :UInt64;
}

struct SharedLogPutRequestE {
  key @0 :Text;
  value @1 : Text;
  hash @2 :UInt64;
}

struct SharedLogPutRequest {
  e @0: List(SharedLogPutRequestE);
}

struct SharedLogPutResponseE {
  index @0 :UInt64;
  hash @1 :UInt64;
}

struct SharedLogPutResponse {
  e @0: List(SharedLogPutResponseE);
}

struct SharedLogEntry {
  key @0 :Text;
  value @1 : Text;
}

struct SharedLogGetRequest {
  index @0 : UInt64;
}

struct SharedLogGetResponse {
  index @0 : UInt64;
  logIndex @1: UInt64;
  e @2: List(SharedLogEntry);
}

# TODO: Set up craq requests and responses
struct CraqForwardPropagateRequest {
  key @0 :Text;
  value @1 :Text;
  clientIndex @2: UInt64;
  clientPort @3: UInt64;
}

struct CraqBackwardPropagateRequest {
  key @0 :Text;
  value @1 :Text;
  clientIndex @2: UInt64;
  clientPort @3: UInt64;
}

struct Packet {
  data :union {
    putRequest @0 :PutRequest;
    putResponse @1 :PutResponse;
    getRequest @2 :GetRequest;
    getResponse @3 :GetResponse;
    rdmaSetupRequest @4: RdmaSetupRequest;
    rdmaSetupResponse @5: RdmaSetupResponse;
    clientSyncRequest @6: ClientSyncRequest;
    clientSyncResponse @7: ClientSyncResponse;
    singletonPutRequest @8: SingletonPutRequest;
    deleteRequest @9: DeleteRequest;
    fallbackGetRequest @10: FallbackGetRequest;
    fallbackGetResponse @11: FallbackGetResponse;
    sharedLogForwardRequest @12: SharedLogForwardRequest;
    sharedLogForwardResponse @13: SharedLogForwardResponse;
    sharedLogPutRequest @14: SharedLogPutRequest;
    sharedLogPutResponse @15: SharedLogPutResponse;
    sharedLogGetRequest @16: SharedLogGetRequest;
    sharedLogGetResponse @17: SharedLogGetResponse;
    craqForwardPropagateRequest @18: CraqForwardPropagateRequest;
    craqBackwardPropagateRequest @19: CraqBackwardPropagateRequest;
  }
}

struct Packets {
  packets @0 :List(Packet);
}